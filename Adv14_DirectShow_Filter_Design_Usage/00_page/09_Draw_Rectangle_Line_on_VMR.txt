// ==================================  畫圖主程式   ========================
const float X_EDGE_BUFFER=0.05f; // Pixel buffer between bitmap and window edge
                                 // (represented in composition space [0 - 1.0f])
const float Y_EDGE_BUFFER=0.05f;
#define TRANSPARENCY_VALUE   (1.0f)

HRESULT BlendLine(HWND hwndApp,int StartY,int StartX,int EndY,int EndX,IVMRMixerBitmap9 *pBMP){
    LONG cx, cy; // 影像的寬高資訊
    HRESULT hr;

    //  取得目前原始播放影像的寬高資訊
    hr = pWC->GetNativeVideoSize(&cx, &cy, NULL, NULL);
    if (FAILED(hr)) {
        Msg(TEXT("GetNativeVideoSize FAILED!  hr=0x%x\r\n"), hr);
        return hr;
    }

    // 建立一個與目前視窗相容的 HDC hdcBmp (等一下要給 [文字 bmp] 使用)
    HDC hdc = GetDC(hwndApp);
    HDC hdcBmp = CreateCompatibleDC(hdc); // our new HDC

    // 建立一個新的 bitmap 大小剛好與顯示的影像高寬一樣
    RECT rcMyBMP;
    HBITMAP hbm;
    SetRect(&rcMyBMP, 0, 0, cx, cy); // 設定目前新的 Bitmap 的 位置資訊
    hbm = CreateCompatibleBitmap(hdc, cx, cy); // 建立新的 bitmap 關鍵片段
    ReleaseDC(hwndApp, hdc); // 現在 hdc 已經不需要了, 先 Released 以免忘記!

	// 設定目前 [背景DC] 的圖形, 為 [新的 Bitmap],
	// 等一下我們要利用 [背景DC] 在 Bitmap 上畫圖
    BITMAP bm; // our new bitmap
    HBITMAP hbmOld; // old
    GetObject(hbm, sizeof(bm), &bm); // 取得剛剛建立好的 bitmap hbm 資料 -> bm

	// 設定背景顏色: 如 虛線或刷子的背景顏色
    SetBkColor(hdcBmp, RGB(255,255,255)); 

    // 建立繪圖輔助物件
	HPEN hpen, hpenOld;
	HBRUSH hbrush, hbrushOld;
    hpen = CreatePen(PS_SOLID, 10, RGB(0, 255, 0));    // 建立一支綠色的筆
    hbrush = CreateSolidBrush(RGB(255, 255, 255));// 建立筆刷物件

	// 設定 [背景 DC] 新的圖,新的筆和刷子
	hbmOld = (HBITMAP)SelectObject(hdcBmp, hbm); 
    hpenOld = (HPEN)SelectObject(hdcBmp, hpen);// 設定目前 [背景DC] 的筆為 [新的筆]
	hbrushOld = (HBRUSH)SelectObject(hdcBmp, hbrush);// 設定目前 [背景DC] 的刷子為 [新的刷子]
	
	// 畫出測試幾何圖形
    Rectangle(hdcBmp, 0,0, cx,cy); // 方形
	MoveToEx(hdcBmp,StartX,StartY,NULL); // 直線
	LineTo(hdcBmp, EndX, EndY);
	
	// 用完繪圖輔助物件, 先刪除以免忘記
	DeleteObject(SelectObject(hdcBmp, hpenOld));
	DeleteObject(SelectObject(hdcBmp, hbrushOld));
	

	// 與 VMR-9 整合
	VMR9AlphaBitmap bmpInfo; // 因為我們使用 IVMRMixerBitmap9, 所以在 SetAlphaBitmap 需要使用 VMR-9 的版本
    ZeroMemory(&bmpInfo, sizeof(bmpInfo) );
    bmpInfo.dwFlags = VMRBITMAP_HDC; // 設定等一下要顯示的時候, 是使用我們給的 Bitmap DC 上的 bitmap 畫圖. 
    bmpInfo.hdc = hdcBmp;  // 指定我們的 Bitmap DC handle
	
	// 紀錄目前的圖片寬度
    int ImageWidth = bm.bmWidth;

	// 紀錄目前圖片寬度與實際影像寬度的比例
    float fBitmapCompWidth = (float)ImageWidth / (float)cx;
	float fBitmapCompHeight=(float)bm.bmHeight /(float)cy;

	// 從 bitmap 的 右下角開始顯示
    bmpInfo.rDest.left = 0.0f;//0.0f + X_EDGE_BUFFER;
    bmpInfo.rDest.right =fBitmapCompWidth;//1.0f - X_EDGE_BUFFER; //  fBitmapCompWidth;// 
    bmpInfo.rDest.top = 0.0f;// (float)(cy - bm.bmHeight) / (float)cy - Y_EDGE_BUFFER;
    bmpInfo.rDest.bottom = fBitmapCompHeight;//1.0f - Y_EDGE_BUFFER;
    bmpInfo.rSrc = rcMyBMP;
	bmpInfo.fAlpha = TRANSPARENCY_VALUE;// 0.5f;// TRANSPARENCY_VALUE;

    // Set the COLORREF 使得 bitmap 的背景為透明 
    bmpInfo.clrSrcKey = RGB(255, 255, 255);  // Pure white 為透明顏色
    bmpInfo.dwFlags |= VMRBITMAP_SRCCOLORKEY; // 指定要求使用 source color key 進行繪圖

    // 把 圖片直接畫到 VMR 所管理的影像畫面上
    hr = pBMP->SetAlphaBitmap(&bmpInfo);
    if (FAILED(hr))
        Msg(TEXT("SetAlphaBitmap FAILED!  hr=0x%x\r\n\r\n")
            TEXT("NOTE: Your display must be configured for 32-bit color depth\r\n")
            TEXT("for this sample to display alpha-blended text."), hr);

	// 回復原來的設定
    DeleteObject(SelectObject(hdcBmp, hbmOld)); // 必須在 VMR-9 畫完後, 才能刪除 bm 物件


    // 歸還使用的資源
    DeleteObject(hbm);
    DeleteDC(hdcBmp);
}


HRESULT init_Graph_VMR(HWND hWnd,int frameHeight,int frameWidth,REFERENCE_TIME atpf){
	// Step 1: 建立專門播放 eBell native stream 的 Graph Filter 
	HRESULT hr;
	mySource=new CMyPushSourceFilter2(NULL,&hr);
	if(FAILED(hr)) 
        DXShowError(hr);

	// 建立 Filter Graph 之前, 先指定目前 video frame size 與 video frame rate
	mySource->m_pPin->SetFrameData(frameHeight,frameWidth,atpf);

	// Step 2: 建立 VMR filter grpah
	hr=CreateFilter_VMR(mySource,&pFG,hWnd);
	if(FAILED(hr)) 
        DXShowError(hr);

    hr = pFG->QueryInterface(IID_IMediaControl, (void **)&pMC);
	if(FAILED(hr)){
        return hr;
	}

    hr = pFG->QueryInterface(IID_IMediaEventEx, (void **)&pME);
    if(FAILED(hr)){
        pMC->Release();
        return hr;
	}

	// 取得 IMediaSeeking 介面
	hr=pFG->QueryInterface(IID_IMediaSeeking, (void **)&pMS);
	if(FAILED(hr)){
		pMC->Release();
		pME->Release();
		return hr;
	}
	
	// 取得 IMediaEvent 介面
    OAEVENT oEvent;
    hr = pME->GetEventHandle(&oEvent);
	if(FAILED(hr)){
		pMC->Release();
		pME->Release();
		return hr;
	}

	// 取得 IVideoWindow 介面
	// pFG->QueryInterface(IID_IVideoWindow, (void **)&pVidWin);

	pMC->Stop();
	return hr;
}

HRESULT CreateFilter_VMR(CComPtr<IBaseFilter> pSource,IFilterGraph **ppFG,HWND hWnd){
	 
	//  Step 2: Create filter graph 
    HRESULT hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC,IID_IFilterGraph, (void**) ppFG);
    if(FAILED(hr)) {
        return hr;
    }
	
    // Step 3: Get a GraphBuilder interface from the filter graph 
	IGraphBuilder *pBuilder;
    hr = (*ppFG)->QueryInterface(IID_IGraphBuilder, (void **)&pBuilder);
    if(FAILED(hr))
    {
        return hr;
    }

	// CComPtr<IBaseFilter> pSource=mySource;
	hr=pBuilder->AddFilter(pSource,_T("MyPushSourceFilter2"));
	if(FAILED(hr)) {
        return hr;
    }
		
	// Step 4: 取得 video Render
	// CComPtr<IBaseFilter> m_pVR; // Default Video Render
	//hr =AddFilterByCLSID(pBuilder, CLSID_VideoRenderer, _T("Video Render"), &m_pVR); // Default Render
	hr=AddFilterByCLSID(pBuilder,CLSID_VideoMixingRenderer9,_T("Video Render"),&m_pVR);// 加入 VMR9 介面
	if(FAILED(hr)){
        return hr;
    }

	
	hr = m_pVR->QueryInterface(IID_IVMRFilterConfig9, (LPVOID *)&pConfig);
	// CComQIPtr<IVMRFilterConfig9> pConfig(m_pVR);
	hr=pConfig->SetRenderingMode(VMR9Mode_Windowless);
	if(FAILED(hr)) 
        DXShowError(hr);

	// CComQIPtr<IVMRWindowlessControl9> pWC(m_pVR);
	hr = m_pVR->QueryInterface(IID_IVMRWindowlessControl9, (LPVOID *)&pWC);
	if(FAILED(hr)) 
		DXShowError(hr);
	hr=pWC->SetVideoClippingWindow(hWnd);
	if(FAILED(hr)) 
		DXShowError(hr);

	// Request point filtering (instead of bilinear filtering)
    // to improve the text quality.  In general, if you are 
    // not scaling the app Image, you should use point filtering.
    // This is very important if you are doing source color keying.
	
	IVMRMixerControl9 *pMix;
	hr = m_pVR->QueryInterface(IID_IVMRMixerControl9, (void**)&pMix);
	if( SUCCEEDED(hr)) 
	{
		DWORD dwPrefs=0;
		hr = pMix->GetMixingPrefs(&dwPrefs);

		if (SUCCEEDED(hr))
		{
			dwPrefs |= MixerPref_PointFiltering;
			dwPrefs &= ~(MixerPref_BiLinearFiltering);

			hr = pMix->SetMixingPrefs(dwPrefs);
		}
		pMix->Release();
	}

	// Get alpha-blended bitmap interface
	hr = m_pVR->QueryInterface(IID_IVMRMixerBitmap9, (void**)&pBMP);


	if(hWnd !=0){
		// 取得視窗的 dimension
		WINDOWINFO wi;
		GetWindowInfo(hWnd,&wi);
		RECT rcWindow=wi.rcClient;
		int left=0;
		int top=0;
		int Width=rcWindow.right-rcWindow.left+1;
		int Height=rcWindow.bottom-rcWindow.top+1;
		
		RECT recDec;
		recDec.left=0;
		recDec.top=0;
		recDec.right=rcWindow.right-rcWindow.left+1;
		recDec.bottom=rcWindow.bottom-rcWindow.top+1;
		hr=pWC->SetVideoPosition(NULL,&recDec);
		if(FAILED(hr)) 
			DXShowError(hr);
	}
/*
	// Step 5: 利用 intelligent connection 的方式, 直接把影像輸出到 VideoRender Filter 
	// 連接 ffDShow 到  Video Render
	hr =ConnectFilters(pBuilder,GetOutPin(pSource,0),m_pVR);
	if(FAILED(hr)){
        return hr;
    }
*/
	// 指定要求使用 XviD 解碼
	// Step 5: 取出 xvid.ax  
	CComPtr<IBaseFilter> m_pVideoDeocder; // xvid Video Ddecoder
	hr =AddFilterByCLSID(pBuilder, CLSID_XVID, _T("XVID"), &m_pVideoDeocder); // Default Render
	if(FAILED(hr)){
        return hr;
    }

	// Step 6: 連接 source 到  xvid
	hr =ConnectFilters(pBuilder,GetOutPin(pSource,0),m_pVideoDeocder);
	if(FAILED(hr)){
        return hr;
    }

	// Step 7: 連接 xvid 到 Video Render
	hr =ConnectFilters(pBuilder,GetOutPin(m_pVideoDeocder,0),m_pVR);
	if(FAILED(hr)){
        return hr;
    }
	

}